group 'tomwamt'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.3.50'

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'kotlin2js'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.moowork.node'

repositories {
    mavenLocal()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    mavenCentral()
    maven { url "https://juggernaut0.github.io/m2/repository" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.13.0"
    compile "com.github.juggernaut0.kui:kui:0.6.1"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

compileJava.enabled = false
jar.enabled = false

clean {
    delete 'out'
}

task assembleWeb(type: Copy, dependsOn: classes) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js")
            }
        })
    }
    from compileKotlin2Js.destinationDir
    include '**/*.js'
    includeEmptyDirs false
    into "${projectDir}/out/js"
}

task copyStaticWeb(type: Copy) {
    from 'web'
    exclude 'test.html'
    into 'out'
}

task copyResources(type: Copy, dependsOn: processResources) {
    from processResources.destinationDir
    into "${projectDir}/out"
}

assemble.dependsOn assembleWeb
assemble.dependsOn copyStaticWeb
assemble.dependsOn copyResources

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "umd"
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

node {
    download = true
}

task installJest(type: NpmTask) {
    args = ['install', 'jest']
    outputs.dir("${projectDir}/node_modules")
}

task runJest(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installJest]) {
    script = file('node_modules/jest/bin/jest.js')
    args = [projectDir.toURI().relativize(compileTestKotlin2Js.outputFile.toURI())]
}

test.dependsOn runJest
